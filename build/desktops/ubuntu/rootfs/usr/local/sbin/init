#!/bin/bash

export HOME="${HOME:-/home/$USER}"

echo "** Setting up user account: ${USER}"
useradd --uid ${UID} --no-create-home --home-dir "${HOME}" --shell /bin/bash --user-group --groups adm ${USER}
passwd -d ${USER}
mkdir -p "${HOME}"
mkdir -p "${HOME}/.config/pulse"
echo "load-module module-native-protocol-unix auth-anonymous=1" > "${HOME}/.config/pulse/default.pa"
cp /etc/.gtkrc-2.0 "${HOME}"
chown -R ${USER}: "${HOME}"

echo "** Setting up user runtime dir"
mkdir -p /run/user/${UID} && chmod 0700 /run/user/${UID} && chown ${USER}: /run/user/${UID}

# This could be more cleverly done inside the image itself as opposed to at boot.
if [[ "${ENABLE_ROOT}" == "true" ]] ; then
    echo "** Allowing ${USER} to use root!"
    echo "${USER} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
fi

echo "** Setting up user environment"
# Set the VNC socket dir - this will effectively do nothing if the UNIX socket env var is not set
if [[ -z "${DISPLAY_SOCK_ADDR}" ]] ; then
    if [[ -n "${VNC_SOCK_ADDR}" ]] ; then
        export DISPLAY_SOCK_ADDR="${VNC_SOCK_ADDR}"
    else
        export DISPLAY_SOCK_ADDR="/run/user/${UID}/vnc.sock"
    fi
fi

# Pre-create the vnc socket directory and give it to the user
mkdir -p "$(dirname ${DISPLAY_SOCK_ADDR})" && chown -R ${USER}: "$(dirname ${DISPLAY_SOCK_ADDR})"

# Iterate all var files and do substitution
find /etc/default -type f -exec \
    sed -i \
      -e "s|%USER%|${USER}|g" \
      -e "s|%UNIX_SOCK%|${DISPLAY_SOCK_ADDR}|g" \
      -e "s|%USER_ID%|${UID}|g" \
      -e "s|%HOME%|${HOME}|g" {} +

# Append the current environment to /etc/default/kvdi
env >> /etc/default/kvdi

# Allow an automatic shell at the pts. This will trigger systemd-user as described
# below.
cat << EOF | tee /etc/pam.d/login
auth       sufficient   pam_listfile.so item=tty sense=allow file=/etc/securetty onerr=fail apply=${USER}
auth       required     pam_securetty.so
auth       requisite    pam_nologin.so
-session   optional     pam_loginuid.so
-session   optional     pam_systemd.so
EOF
echo pts/1 >> /etc/securetty

echo "** Starting systemd user instance"
export container=docker
exec /usr/lib/systemd/systemd
